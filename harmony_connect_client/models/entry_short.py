# coding: utf-8

"""
    Harmony Connect

    An easy to use API that helps you access the Factom blockchain.  # noqa: E501

    OpenAPI spec version: 1.0.17
    Contact: harmony-support@factom.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EntryShort(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entry_hash': 'str',
        'stage': 'str'
    }

    attribute_map = {
        'entry_hash': 'entry_hash',
        'stage': 'stage'
    }

    def __init__(self, entry_hash=None, stage=None):  # noqa: E501
        """EntryShort - a model defined in OpenAPI"""  # noqa: E501

        self._entry_hash = None
        self._stage = None
        self.discriminator = None

        if entry_hash is not None:
            self.entry_hash = entry_hash
        if stage is not None:
            self.stage = stage

    @property
    def entry_hash(self):
        """Gets the entry_hash of this EntryShort.  # noqa: E501

        The SHA256 Hash of the entry you just created. You can use this hash to referece this entry in the future.  # noqa: E501

        :return: The entry_hash of this EntryShort.  # noqa: E501
        :rtype: str
        """
        return self._entry_hash

    @entry_hash.setter
    def entry_hash(self, entry_hash):
        """Sets the entry_hash of this EntryShort.

        The SHA256 Hash of the entry you just created. You can use this hash to referece this entry in the future.  # noqa: E501

        :param entry_hash: The entry_hash of this EntryShort.  # noqa: E501
        :type: str
        """

        self._entry_hash = entry_hash

    @property
    def stage(self):
        """Gets the stage of this EntryShort.  # noqa: E501

        The current immutability stage of the new entry. Only returned if callbacks are enabled.  # noqa: E501

        :return: The stage of this EntryShort.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this EntryShort.

        The current immutability stage of the new entry. Only returned if callbacks are enabled.  # noqa: E501

        :param stage: The stage of this EntryShort.  # noqa: E501
        :type: str
        """

        self._stage = stage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryShort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
