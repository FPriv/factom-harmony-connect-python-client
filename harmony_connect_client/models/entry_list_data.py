# coding: utf-8

"""
    Harmony Connect

    An easy to use API that helps you access the Factom blockchain.  # noqa: E501

    OpenAPI spec version: 1.0.17
    Contact: harmony-support@factom.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EntryListData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entry_hash': 'str',
        'chain': 'EntryLinkChain',
        'created_at': 'str',
        'href': 'str'
    }

    attribute_map = {
        'entry_hash': 'entry_hash',
        'chain': 'chain',
        'created_at': 'created_at',
        'href': 'href'
    }

    def __init__(self, entry_hash=None, chain=None, created_at=None, href=None):  # noqa: E501
        """EntryListData - a model defined in OpenAPI"""  # noqa: E501

        self._entry_hash = None
        self._chain = None
        self._created_at = None
        self._href = None
        self.discriminator = None

        self.entry_hash = entry_hash
        self.chain = chain
        self.created_at = created_at
        self.href = href

    @property
    def entry_hash(self):
        """Gets the entry_hash of this EntryListData.  # noqa: E501

        The SHA256 Hash of this entry.  # noqa: E501

        :return: The entry_hash of this EntryListData.  # noqa: E501
        :rtype: str
        """
        return self._entry_hash

    @entry_hash.setter
    def entry_hash(self, entry_hash):
        """Sets the entry_hash of this EntryListData.

        The SHA256 Hash of this entry.  # noqa: E501

        :param entry_hash: The entry_hash of this EntryListData.  # noqa: E501
        :type: str
        """
        if entry_hash is None:
            raise ValueError("Invalid value for `entry_hash`, must not be `None`")  # noqa: E501

        self._entry_hash = entry_hash

    @property
    def chain(self):
        """Gets the chain of this EntryListData.  # noqa: E501


        :return: The chain of this EntryListData.  # noqa: E501
        :rtype: EntryLinkChain
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this EntryListData.


        :param chain: The chain of this EntryListData.  # noqa: E501
        :type: EntryLinkChain
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501

        self._chain = chain

    @property
    def created_at(self):
        """Gets the created_at of this EntryListData.  # noqa: E501

        The time at which this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`  # noqa: E501

        :return: The created_at of this EntryListData.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EntryListData.

        The time at which this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: `YYYY-MM-DDThh:mm:ssZ`  # noqa: E501

        :param created_at: The created_at of this EntryListData.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def href(self):
        """Gets the href of this EntryListData.  # noqa: E501

        An API link to retrieve all information about this entry.  # noqa: E501

        :return: The href of this EntryListData.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this EntryListData.

        An API link to retrieve all information about this entry.  # noqa: E501

        :param href: The href of this EntryListData.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryListData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
